from flask import Flask, jsonify, render_template, request, redirect, url_for, session
from werkzeug.utils import secure_filename
import os
import malware_analysis

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'  # Needed for session management
UPLOAD_FOLDER = 'uploads/'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Ensure the uploads directory exists
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

@app.route('/')
def index():
    # Get the filename from the session or any other way you're storing it
    filename = session.get('filename', '')
    return render_template('index.html', filename=filename)

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400
    
    if file:
        filename = secure_filename(file.filename)
        # Ensure the upload folder exists
        if not os.path.exists(app.config['UPLOAD_FOLDER']):
            os.makedirs(app.config['UPLOAD_FOLDER'])
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path) 
        # Store filename in session
        session['filename'] = filename
        
        # Redirect to scan result page
        return redirect(url_for('scan_file', filename=filename))
    
    return redirect(request.url)

@app.route('/uploads/<filename>')
def scan_file(filename):
    # Define the path to the file containing known malware hashes and signatures
    known_hashes_file = "hashes.txt"
    signature_file = "signatures.txt"
    
    # Call the scan_files function from malware_analysis.py
    try:
        scan_result = malware_analysis.scan_files(app.config['UPLOAD_FOLDER'], known_hashes_file, signature_file)
    except Exception as e:
        return jsonify({'error': str(e)}), 500
    
     # Check if scan_result is None or not a list
    if not scan_result:
        return jsonify({'error': 'No scan results available'}), 500
    
    # Filter the results for the specific file
    result = next((res for res in scan_result if res['name'] == filename),None)
    
    # Return or render the result
    return render_template('scan_result.html', result=result)

if __name__ == '__main__':
    app.run(debug=True)

